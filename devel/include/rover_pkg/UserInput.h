// Generated by gencpp from file rover_pkg/UserInput.msg
// DO NOT EDIT!


#ifndef ROVER_PKG_MESSAGE_USERINPUT_H
#define ROVER_PKG_MESSAGE_USERINPUT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rover_pkg
{
template <class ContainerAllocator>
struct UserInput_
{
  typedef UserInput_<ContainerAllocator> Type;

  UserInput_()
    : controlMode()
    , keysPressed()
    , ljx(0.0)
    , ljy(0.0)
    , rjx(0.0)
    , rjy(0.0)
    , but1(false)
    , but2(false)
    , but3(false)  {
    }
  UserInput_(const ContainerAllocator& _alloc)
    : controlMode(_alloc)
    , keysPressed(_alloc)
    , ljx(0.0)
    , ljy(0.0)
    , rjx(0.0)
    , rjy(0.0)
    , but1(false)
    , but2(false)
    , but3(false)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _controlMode_type;
  _controlMode_type controlMode;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _keysPressed_type;
  _keysPressed_type keysPressed;

   typedef float _ljx_type;
  _ljx_type ljx;

   typedef float _ljy_type;
  _ljy_type ljy;

   typedef float _rjx_type;
  _rjx_type rjx;

   typedef float _rjy_type;
  _rjy_type rjy;

   typedef uint8_t _but1_type;
  _but1_type but1;

   typedef uint8_t _but2_type;
  _but2_type but2;

   typedef uint8_t _but3_type;
  _but3_type but3;





  typedef boost::shared_ptr< ::rover_pkg::UserInput_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rover_pkg::UserInput_<ContainerAllocator> const> ConstPtr;

}; // struct UserInput_

typedef ::rover_pkg::UserInput_<std::allocator<void> > UserInput;

typedef boost::shared_ptr< ::rover_pkg::UserInput > UserInputPtr;
typedef boost::shared_ptr< ::rover_pkg::UserInput const> UserInputConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rover_pkg::UserInput_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rover_pkg::UserInput_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rover_pkg::UserInput_<ContainerAllocator1> & lhs, const ::rover_pkg::UserInput_<ContainerAllocator2> & rhs)
{
  return lhs.controlMode == rhs.controlMode &&
    lhs.keysPressed == rhs.keysPressed &&
    lhs.ljx == rhs.ljx &&
    lhs.ljy == rhs.ljy &&
    lhs.rjx == rhs.rjx &&
    lhs.rjy == rhs.rjy &&
    lhs.but1 == rhs.but1 &&
    lhs.but2 == rhs.but2 &&
    lhs.but3 == rhs.but3;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rover_pkg::UserInput_<ContainerAllocator1> & lhs, const ::rover_pkg::UserInput_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rover_pkg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::rover_pkg::UserInput_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rover_pkg::UserInput_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rover_pkg::UserInput_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rover_pkg::UserInput_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rover_pkg::UserInput_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rover_pkg::UserInput_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rover_pkg::UserInput_<ContainerAllocator> >
{
  static const char* value()
  {
    return "66775f4abc092869a360f7947e03c1bb";
  }

  static const char* value(const ::rover_pkg::UserInput_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x66775f4abc092869ULL;
  static const uint64_t static_value2 = 0xa360f7947e03c1bbULL;
};

template<class ContainerAllocator>
struct DataType< ::rover_pkg::UserInput_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rover_pkg/UserInput";
  }

  static const char* value(const ::rover_pkg::UserInput_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rover_pkg::UserInput_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string controlMode\n"
"string keysPressed\n"
"float32 ljx\n"
"float32 ljy\n"
"float32 rjx\n"
"float32 rjy\n"
"bool but1\n"
"bool but2\n"
"bool but3\n"
;
  }

  static const char* value(const ::rover_pkg::UserInput_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rover_pkg::UserInput_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.controlMode);
      stream.next(m.keysPressed);
      stream.next(m.ljx);
      stream.next(m.ljy);
      stream.next(m.rjx);
      stream.next(m.rjy);
      stream.next(m.but1);
      stream.next(m.but2);
      stream.next(m.but3);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct UserInput_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rover_pkg::UserInput_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rover_pkg::UserInput_<ContainerAllocator>& v)
  {
    s << indent << "controlMode: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.controlMode);
    s << indent << "keysPressed: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.keysPressed);
    s << indent << "ljx: ";
    Printer<float>::stream(s, indent + "  ", v.ljx);
    s << indent << "ljy: ";
    Printer<float>::stream(s, indent + "  ", v.ljy);
    s << indent << "rjx: ";
    Printer<float>::stream(s, indent + "  ", v.rjx);
    s << indent << "rjy: ";
    Printer<float>::stream(s, indent + "  ", v.rjy);
    s << indent << "but1: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.but1);
    s << indent << "but2: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.but2);
    s << indent << "but3: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.but3);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROVER_PKG_MESSAGE_USERINPUT_H
