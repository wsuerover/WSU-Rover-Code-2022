// Generated by gencpp from file rover_pkg/RockerBogieData.msg
// DO NOT EDIT!


#ifndef ROVER_PKG_MESSAGE_ROCKERBOGIEDATA_H
#define ROVER_PKG_MESSAGE_ROCKERBOGIEDATA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rover_pkg
{
template <class ContainerAllocator>
struct RockerBogieData_
{
  typedef RockerBogieData_<ContainerAllocator> Type;

  RockerBogieData_()
    : rb_fr(0.0)
    , rb_mr(0.0)
    , rb_rr(0.0)
    , rb_fl(0.0)
    , rb_ml(0.0)
    , rb_rl(0.0)  {
    }
  RockerBogieData_(const ContainerAllocator& _alloc)
    : rb_fr(0.0)
    , rb_mr(0.0)
    , rb_rr(0.0)
    , rb_fl(0.0)
    , rb_ml(0.0)
    , rb_rl(0.0)  {
  (void)_alloc;
    }



   typedef float _rb_fr_type;
  _rb_fr_type rb_fr;

   typedef float _rb_mr_type;
  _rb_mr_type rb_mr;

   typedef float _rb_rr_type;
  _rb_rr_type rb_rr;

   typedef float _rb_fl_type;
  _rb_fl_type rb_fl;

   typedef float _rb_ml_type;
  _rb_ml_type rb_ml;

   typedef float _rb_rl_type;
  _rb_rl_type rb_rl;





  typedef boost::shared_ptr< ::rover_pkg::RockerBogieData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rover_pkg::RockerBogieData_<ContainerAllocator> const> ConstPtr;

}; // struct RockerBogieData_

typedef ::rover_pkg::RockerBogieData_<std::allocator<void> > RockerBogieData;

typedef boost::shared_ptr< ::rover_pkg::RockerBogieData > RockerBogieDataPtr;
typedef boost::shared_ptr< ::rover_pkg::RockerBogieData const> RockerBogieDataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rover_pkg::RockerBogieData_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rover_pkg::RockerBogieData_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rover_pkg::RockerBogieData_<ContainerAllocator1> & lhs, const ::rover_pkg::RockerBogieData_<ContainerAllocator2> & rhs)
{
  return lhs.rb_fr == rhs.rb_fr &&
    lhs.rb_mr == rhs.rb_mr &&
    lhs.rb_rr == rhs.rb_rr &&
    lhs.rb_fl == rhs.rb_fl &&
    lhs.rb_ml == rhs.rb_ml &&
    lhs.rb_rl == rhs.rb_rl;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rover_pkg::RockerBogieData_<ContainerAllocator1> & lhs, const ::rover_pkg::RockerBogieData_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rover_pkg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::rover_pkg::RockerBogieData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rover_pkg::RockerBogieData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rover_pkg::RockerBogieData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rover_pkg::RockerBogieData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rover_pkg::RockerBogieData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rover_pkg::RockerBogieData_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rover_pkg::RockerBogieData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9fabc40ef174095f6a972da72d98b480";
  }

  static const char* value(const ::rover_pkg::RockerBogieData_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9fabc40ef174095fULL;
  static const uint64_t static_value2 = 0x6a972da72d98b480ULL;
};

template<class ContainerAllocator>
struct DataType< ::rover_pkg::RockerBogieData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rover_pkg/RockerBogieData";
  }

  static const char* value(const ::rover_pkg::RockerBogieData_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rover_pkg::RockerBogieData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 rb_fr\n"
"float32 rb_mr\n"
"float32 rb_rr\n"
"float32 rb_fl\n"
"float32 rb_ml\n"
"float32 rb_rl\n"
"\n"
;
  }

  static const char* value(const ::rover_pkg::RockerBogieData_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rover_pkg::RockerBogieData_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.rb_fr);
      stream.next(m.rb_mr);
      stream.next(m.rb_rr);
      stream.next(m.rb_fl);
      stream.next(m.rb_ml);
      stream.next(m.rb_rl);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RockerBogieData_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rover_pkg::RockerBogieData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rover_pkg::RockerBogieData_<ContainerAllocator>& v)
  {
    s << indent << "rb_fr: ";
    Printer<float>::stream(s, indent + "  ", v.rb_fr);
    s << indent << "rb_mr: ";
    Printer<float>::stream(s, indent + "  ", v.rb_mr);
    s << indent << "rb_rr: ";
    Printer<float>::stream(s, indent + "  ", v.rb_rr);
    s << indent << "rb_fl: ";
    Printer<float>::stream(s, indent + "  ", v.rb_fl);
    s << indent << "rb_ml: ";
    Printer<float>::stream(s, indent + "  ", v.rb_ml);
    s << indent << "rb_rl: ";
    Printer<float>::stream(s, indent + "  ", v.rb_rl);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROVER_PKG_MESSAGE_ROCKERBOGIEDATA_H
