// Generated by gencpp from file rover_pkg/ArmData.msg
// DO NOT EDIT!


#ifndef ROVER_PKG_MESSAGE_ARMDATA_H
#define ROVER_PKG_MESSAGE_ARMDATA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rover_pkg
{
template <class ContainerAllocator>
struct ArmData_
{
  typedef ArmData_<ContainerAllocator> Type;

  ArmData_()
    : arm_zm(0.0)
    , arm_bm(0.0)
    , arm_am(0.0)
    , arm_wr(0.0)
    , awm_wp(0.0)
    , qdcl(false)  {
    }
  ArmData_(const ContainerAllocator& _alloc)
    : arm_zm(0.0)
    , arm_bm(0.0)
    , arm_am(0.0)
    , arm_wr(0.0)
    , awm_wp(0.0)
    , qdcl(false)  {
  (void)_alloc;
    }



   typedef float _arm_zm_type;
  _arm_zm_type arm_zm;

   typedef float _arm_bm_type;
  _arm_bm_type arm_bm;

   typedef float _arm_am_type;
  _arm_am_type arm_am;

   typedef float _arm_wr_type;
  _arm_wr_type arm_wr;

   typedef float _awm_wp_type;
  _awm_wp_type awm_wp;

   typedef uint8_t _qdcl_type;
  _qdcl_type qdcl;





  typedef boost::shared_ptr< ::rover_pkg::ArmData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rover_pkg::ArmData_<ContainerAllocator> const> ConstPtr;

}; // struct ArmData_

typedef ::rover_pkg::ArmData_<std::allocator<void> > ArmData;

typedef boost::shared_ptr< ::rover_pkg::ArmData > ArmDataPtr;
typedef boost::shared_ptr< ::rover_pkg::ArmData const> ArmDataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rover_pkg::ArmData_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rover_pkg::ArmData_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rover_pkg::ArmData_<ContainerAllocator1> & lhs, const ::rover_pkg::ArmData_<ContainerAllocator2> & rhs)
{
  return lhs.arm_zm == rhs.arm_zm &&
    lhs.arm_bm == rhs.arm_bm &&
    lhs.arm_am == rhs.arm_am &&
    lhs.arm_wr == rhs.arm_wr &&
    lhs.awm_wp == rhs.awm_wp &&
    lhs.qdcl == rhs.qdcl;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rover_pkg::ArmData_<ContainerAllocator1> & lhs, const ::rover_pkg::ArmData_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rover_pkg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::rover_pkg::ArmData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rover_pkg::ArmData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rover_pkg::ArmData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rover_pkg::ArmData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rover_pkg::ArmData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rover_pkg::ArmData_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rover_pkg::ArmData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7179ed0dcb5c273219b9474db52af818";
  }

  static const char* value(const ::rover_pkg::ArmData_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7179ed0dcb5c2732ULL;
  static const uint64_t static_value2 = 0x19b9474db52af818ULL;
};

template<class ContainerAllocator>
struct DataType< ::rover_pkg::ArmData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rover_pkg/ArmData";
  }

  static const char* value(const ::rover_pkg::ArmData_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rover_pkg::ArmData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 arm_zm\n"
"float32 arm_bm\n"
"float32 arm_am\n"
"float32 arm_wr\n"
"float32 awm_wp\n"
"bool qdcl\n"
;
  }

  static const char* value(const ::rover_pkg::ArmData_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rover_pkg::ArmData_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.arm_zm);
      stream.next(m.arm_bm);
      stream.next(m.arm_am);
      stream.next(m.arm_wr);
      stream.next(m.awm_wp);
      stream.next(m.qdcl);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ArmData_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rover_pkg::ArmData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rover_pkg::ArmData_<ContainerAllocator>& v)
  {
    s << indent << "arm_zm: ";
    Printer<float>::stream(s, indent + "  ", v.arm_zm);
    s << indent << "arm_bm: ";
    Printer<float>::stream(s, indent + "  ", v.arm_bm);
    s << indent << "arm_am: ";
    Printer<float>::stream(s, indent + "  ", v.arm_am);
    s << indent << "arm_wr: ";
    Printer<float>::stream(s, indent + "  ", v.arm_wr);
    s << indent << "awm_wp: ";
    Printer<float>::stream(s, indent + "  ", v.awm_wp);
    s << indent << "qdcl: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.qdcl);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROVER_PKG_MESSAGE_ARMDATA_H
