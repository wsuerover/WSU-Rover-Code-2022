# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rover_pkg/RoverData.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class RoverData(genpy.Message):
  _md5sum = "736b6a6f87def00a2326ecbc6c3788ee"
  _type = "rover_pkg/RoverData"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float32 rb_fr
float32 rb_mr
float32 rb_rr
float32 rb_fl
float32 rb_ml
float32 rb_rl

float32 arm_zm
float32 arm_bm
float32 arm_am
float32 arm_wr
float32 awm_wp
bool qdcl
"""
  __slots__ = ['rb_fr','rb_mr','rb_rr','rb_fl','rb_ml','rb_rl','arm_zm','arm_bm','arm_am','arm_wr','awm_wp','qdcl']
  _slot_types = ['float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       rb_fr,rb_mr,rb_rr,rb_fl,rb_ml,rb_rl,arm_zm,arm_bm,arm_am,arm_wr,awm_wp,qdcl

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RoverData, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.rb_fr is None:
        self.rb_fr = 0.
      if self.rb_mr is None:
        self.rb_mr = 0.
      if self.rb_rr is None:
        self.rb_rr = 0.
      if self.rb_fl is None:
        self.rb_fl = 0.
      if self.rb_ml is None:
        self.rb_ml = 0.
      if self.rb_rl is None:
        self.rb_rl = 0.
      if self.arm_zm is None:
        self.arm_zm = 0.
      if self.arm_bm is None:
        self.arm_bm = 0.
      if self.arm_am is None:
        self.arm_am = 0.
      if self.arm_wr is None:
        self.arm_wr = 0.
      if self.awm_wp is None:
        self.awm_wp = 0.
      if self.qdcl is None:
        self.qdcl = False
    else:
      self.rb_fr = 0.
      self.rb_mr = 0.
      self.rb_rr = 0.
      self.rb_fl = 0.
      self.rb_ml = 0.
      self.rb_rl = 0.
      self.arm_zm = 0.
      self.arm_bm = 0.
      self.arm_am = 0.
      self.arm_wr = 0.
      self.awm_wp = 0.
      self.qdcl = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_11fB().pack(_x.rb_fr, _x.rb_mr, _x.rb_rr, _x.rb_fl, _x.rb_ml, _x.rb_rl, _x.arm_zm, _x.arm_bm, _x.arm_am, _x.arm_wr, _x.awm_wp, _x.qdcl))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 45
      (_x.rb_fr, _x.rb_mr, _x.rb_rr, _x.rb_fl, _x.rb_ml, _x.rb_rl, _x.arm_zm, _x.arm_bm, _x.arm_am, _x.arm_wr, _x.awm_wp, _x.qdcl,) = _get_struct_11fB().unpack(str[start:end])
      self.qdcl = bool(self.qdcl)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_11fB().pack(_x.rb_fr, _x.rb_mr, _x.rb_rr, _x.rb_fl, _x.rb_ml, _x.rb_rl, _x.arm_zm, _x.arm_bm, _x.arm_am, _x.arm_wr, _x.awm_wp, _x.qdcl))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 45
      (_x.rb_fr, _x.rb_mr, _x.rb_rr, _x.rb_fl, _x.rb_ml, _x.rb_rl, _x.arm_zm, _x.arm_bm, _x.arm_am, _x.arm_wr, _x.awm_wp, _x.qdcl,) = _get_struct_11fB().unpack(str[start:end])
      self.qdcl = bool(self.qdcl)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_11fB = None
def _get_struct_11fB():
    global _struct_11fB
    if _struct_11fB is None:
        _struct_11fB = struct.Struct("<11fB")
    return _struct_11fB
