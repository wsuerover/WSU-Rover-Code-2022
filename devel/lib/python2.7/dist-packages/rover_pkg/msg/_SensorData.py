# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rover_pkg/SensorData.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SensorData(genpy.Message):
  _md5sum = "6d8c06323fba8db66de6bea5d0e4ef77"
  _type = "rover_pkg/SensorData"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int32 pressure
int32 rbl_temp
int32 rbr_temp
int32 bmp280_temp

bool st_set
bool st_index

int32 v_csense
int32 v_vsense

int32 rb_fr_vel
int32 rb_fr_pos
int32 rb_mr_vel
int32 rb_mr_pos
int32 rb_rr_vel
int32 rb_rr_pos

int32 rb_fl_vel
int32 rb_fl_pos
int32 rb_ml_vel
int32 rb_ml_pos
int32 rb_rl_vel
int32 rb_rl_pos

int32 rb_rb_sig
int32 rb_lb_sig
int32 rb_da_sig

int32 table_sig
int32 bd_sig
int32 ad_sig
int32 wpd_sig
int32 wrd_sig

bool chss_gpio1
bool chss_gpio2
bool chss_gpio3
bool chss_gpio4
bool chss_gpio5
bool chss_gpio6

float32 gx
float32 gy
float32 gz

float32 ax
float32 ay
float32 az

float32 mx
float32 my
float32 mz








"""
  __slots__ = ['pressure','rbl_temp','rbr_temp','bmp280_temp','st_set','st_index','v_csense','v_vsense','rb_fr_vel','rb_fr_pos','rb_mr_vel','rb_mr_pos','rb_rr_vel','rb_rr_pos','rb_fl_vel','rb_fl_pos','rb_ml_vel','rb_ml_pos','rb_rl_vel','rb_rl_pos','rb_rb_sig','rb_lb_sig','rb_da_sig','table_sig','bd_sig','ad_sig','wpd_sig','wrd_sig','chss_gpio1','chss_gpio2','chss_gpio3','chss_gpio4','chss_gpio5','chss_gpio6','gx','gy','gz','ax','ay','az','mx','my','mz']
  _slot_types = ['int32','int32','int32','int32','bool','bool','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','bool','bool','bool','bool','bool','bool','float32','float32','float32','float32','float32','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       pressure,rbl_temp,rbr_temp,bmp280_temp,st_set,st_index,v_csense,v_vsense,rb_fr_vel,rb_fr_pos,rb_mr_vel,rb_mr_pos,rb_rr_vel,rb_rr_pos,rb_fl_vel,rb_fl_pos,rb_ml_vel,rb_ml_pos,rb_rl_vel,rb_rl_pos,rb_rb_sig,rb_lb_sig,rb_da_sig,table_sig,bd_sig,ad_sig,wpd_sig,wrd_sig,chss_gpio1,chss_gpio2,chss_gpio3,chss_gpio4,chss_gpio5,chss_gpio6,gx,gy,gz,ax,ay,az,mx,my,mz

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SensorData, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.pressure is None:
        self.pressure = 0
      if self.rbl_temp is None:
        self.rbl_temp = 0
      if self.rbr_temp is None:
        self.rbr_temp = 0
      if self.bmp280_temp is None:
        self.bmp280_temp = 0
      if self.st_set is None:
        self.st_set = False
      if self.st_index is None:
        self.st_index = False
      if self.v_csense is None:
        self.v_csense = 0
      if self.v_vsense is None:
        self.v_vsense = 0
      if self.rb_fr_vel is None:
        self.rb_fr_vel = 0
      if self.rb_fr_pos is None:
        self.rb_fr_pos = 0
      if self.rb_mr_vel is None:
        self.rb_mr_vel = 0
      if self.rb_mr_pos is None:
        self.rb_mr_pos = 0
      if self.rb_rr_vel is None:
        self.rb_rr_vel = 0
      if self.rb_rr_pos is None:
        self.rb_rr_pos = 0
      if self.rb_fl_vel is None:
        self.rb_fl_vel = 0
      if self.rb_fl_pos is None:
        self.rb_fl_pos = 0
      if self.rb_ml_vel is None:
        self.rb_ml_vel = 0
      if self.rb_ml_pos is None:
        self.rb_ml_pos = 0
      if self.rb_rl_vel is None:
        self.rb_rl_vel = 0
      if self.rb_rl_pos is None:
        self.rb_rl_pos = 0
      if self.rb_rb_sig is None:
        self.rb_rb_sig = 0
      if self.rb_lb_sig is None:
        self.rb_lb_sig = 0
      if self.rb_da_sig is None:
        self.rb_da_sig = 0
      if self.table_sig is None:
        self.table_sig = 0
      if self.bd_sig is None:
        self.bd_sig = 0
      if self.ad_sig is None:
        self.ad_sig = 0
      if self.wpd_sig is None:
        self.wpd_sig = 0
      if self.wrd_sig is None:
        self.wrd_sig = 0
      if self.chss_gpio1 is None:
        self.chss_gpio1 = False
      if self.chss_gpio2 is None:
        self.chss_gpio2 = False
      if self.chss_gpio3 is None:
        self.chss_gpio3 = False
      if self.chss_gpio4 is None:
        self.chss_gpio4 = False
      if self.chss_gpio5 is None:
        self.chss_gpio5 = False
      if self.chss_gpio6 is None:
        self.chss_gpio6 = False
      if self.gx is None:
        self.gx = 0.
      if self.gy is None:
        self.gy = 0.
      if self.gz is None:
        self.gz = 0.
      if self.ax is None:
        self.ax = 0.
      if self.ay is None:
        self.ay = 0.
      if self.az is None:
        self.az = 0.
      if self.mx is None:
        self.mx = 0.
      if self.my is None:
        self.my = 0.
      if self.mz is None:
        self.mz = 0.
    else:
      self.pressure = 0
      self.rbl_temp = 0
      self.rbr_temp = 0
      self.bmp280_temp = 0
      self.st_set = False
      self.st_index = False
      self.v_csense = 0
      self.v_vsense = 0
      self.rb_fr_vel = 0
      self.rb_fr_pos = 0
      self.rb_mr_vel = 0
      self.rb_mr_pos = 0
      self.rb_rr_vel = 0
      self.rb_rr_pos = 0
      self.rb_fl_vel = 0
      self.rb_fl_pos = 0
      self.rb_ml_vel = 0
      self.rb_ml_pos = 0
      self.rb_rl_vel = 0
      self.rb_rl_pos = 0
      self.rb_rb_sig = 0
      self.rb_lb_sig = 0
      self.rb_da_sig = 0
      self.table_sig = 0
      self.bd_sig = 0
      self.ad_sig = 0
      self.wpd_sig = 0
      self.wrd_sig = 0
      self.chss_gpio1 = False
      self.chss_gpio2 = False
      self.chss_gpio3 = False
      self.chss_gpio4 = False
      self.chss_gpio5 = False
      self.chss_gpio6 = False
      self.gx = 0.
      self.gy = 0.
      self.gz = 0.
      self.ax = 0.
      self.ay = 0.
      self.az = 0.
      self.mx = 0.
      self.my = 0.
      self.mz = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_4i2B22i6B9f().pack(_x.pressure, _x.rbl_temp, _x.rbr_temp, _x.bmp280_temp, _x.st_set, _x.st_index, _x.v_csense, _x.v_vsense, _x.rb_fr_vel, _x.rb_fr_pos, _x.rb_mr_vel, _x.rb_mr_pos, _x.rb_rr_vel, _x.rb_rr_pos, _x.rb_fl_vel, _x.rb_fl_pos, _x.rb_ml_vel, _x.rb_ml_pos, _x.rb_rl_vel, _x.rb_rl_pos, _x.rb_rb_sig, _x.rb_lb_sig, _x.rb_da_sig, _x.table_sig, _x.bd_sig, _x.ad_sig, _x.wpd_sig, _x.wrd_sig, _x.chss_gpio1, _x.chss_gpio2, _x.chss_gpio3, _x.chss_gpio4, _x.chss_gpio5, _x.chss_gpio6, _x.gx, _x.gy, _x.gz, _x.ax, _x.ay, _x.az, _x.mx, _x.my, _x.mz))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 148
      (_x.pressure, _x.rbl_temp, _x.rbr_temp, _x.bmp280_temp, _x.st_set, _x.st_index, _x.v_csense, _x.v_vsense, _x.rb_fr_vel, _x.rb_fr_pos, _x.rb_mr_vel, _x.rb_mr_pos, _x.rb_rr_vel, _x.rb_rr_pos, _x.rb_fl_vel, _x.rb_fl_pos, _x.rb_ml_vel, _x.rb_ml_pos, _x.rb_rl_vel, _x.rb_rl_pos, _x.rb_rb_sig, _x.rb_lb_sig, _x.rb_da_sig, _x.table_sig, _x.bd_sig, _x.ad_sig, _x.wpd_sig, _x.wrd_sig, _x.chss_gpio1, _x.chss_gpio2, _x.chss_gpio3, _x.chss_gpio4, _x.chss_gpio5, _x.chss_gpio6, _x.gx, _x.gy, _x.gz, _x.ax, _x.ay, _x.az, _x.mx, _x.my, _x.mz,) = _get_struct_4i2B22i6B9f().unpack(str[start:end])
      self.st_set = bool(self.st_set)
      self.st_index = bool(self.st_index)
      self.chss_gpio1 = bool(self.chss_gpio1)
      self.chss_gpio2 = bool(self.chss_gpio2)
      self.chss_gpio3 = bool(self.chss_gpio3)
      self.chss_gpio4 = bool(self.chss_gpio4)
      self.chss_gpio5 = bool(self.chss_gpio5)
      self.chss_gpio6 = bool(self.chss_gpio6)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_4i2B22i6B9f().pack(_x.pressure, _x.rbl_temp, _x.rbr_temp, _x.bmp280_temp, _x.st_set, _x.st_index, _x.v_csense, _x.v_vsense, _x.rb_fr_vel, _x.rb_fr_pos, _x.rb_mr_vel, _x.rb_mr_pos, _x.rb_rr_vel, _x.rb_rr_pos, _x.rb_fl_vel, _x.rb_fl_pos, _x.rb_ml_vel, _x.rb_ml_pos, _x.rb_rl_vel, _x.rb_rl_pos, _x.rb_rb_sig, _x.rb_lb_sig, _x.rb_da_sig, _x.table_sig, _x.bd_sig, _x.ad_sig, _x.wpd_sig, _x.wrd_sig, _x.chss_gpio1, _x.chss_gpio2, _x.chss_gpio3, _x.chss_gpio4, _x.chss_gpio5, _x.chss_gpio6, _x.gx, _x.gy, _x.gz, _x.ax, _x.ay, _x.az, _x.mx, _x.my, _x.mz))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 148
      (_x.pressure, _x.rbl_temp, _x.rbr_temp, _x.bmp280_temp, _x.st_set, _x.st_index, _x.v_csense, _x.v_vsense, _x.rb_fr_vel, _x.rb_fr_pos, _x.rb_mr_vel, _x.rb_mr_pos, _x.rb_rr_vel, _x.rb_rr_pos, _x.rb_fl_vel, _x.rb_fl_pos, _x.rb_ml_vel, _x.rb_ml_pos, _x.rb_rl_vel, _x.rb_rl_pos, _x.rb_rb_sig, _x.rb_lb_sig, _x.rb_da_sig, _x.table_sig, _x.bd_sig, _x.ad_sig, _x.wpd_sig, _x.wrd_sig, _x.chss_gpio1, _x.chss_gpio2, _x.chss_gpio3, _x.chss_gpio4, _x.chss_gpio5, _x.chss_gpio6, _x.gx, _x.gy, _x.gz, _x.ax, _x.ay, _x.az, _x.mx, _x.my, _x.mz,) = _get_struct_4i2B22i6B9f().unpack(str[start:end])
      self.st_set = bool(self.st_set)
      self.st_index = bool(self.st_index)
      self.chss_gpio1 = bool(self.chss_gpio1)
      self.chss_gpio2 = bool(self.chss_gpio2)
      self.chss_gpio3 = bool(self.chss_gpio3)
      self.chss_gpio4 = bool(self.chss_gpio4)
      self.chss_gpio5 = bool(self.chss_gpio5)
      self.chss_gpio6 = bool(self.chss_gpio6)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_4i2B22i6B9f = None
def _get_struct_4i2B22i6B9f():
    global _struct_4i2B22i6B9f
    if _struct_4i2B22i6B9f is None:
        _struct_4i2B22i6B9f = struct.Struct("<4i2B22i6B9f")
    return _struct_4i2B22i6B9f
