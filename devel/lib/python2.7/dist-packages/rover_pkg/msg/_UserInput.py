# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rover_pkg/UserInput.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class UserInput(genpy.Message):
  _md5sum = "66775f4abc092869a360f7947e03c1bb"
  _type = "rover_pkg/UserInput"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """string controlMode
string keysPressed
float32 ljx
float32 ljy
float32 rjx
float32 rjy
bool but1
bool but2
bool but3
"""
  __slots__ = ['controlMode','keysPressed','ljx','ljy','rjx','rjy','but1','but2','but3']
  _slot_types = ['string','string','float32','float32','float32','float32','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       controlMode,keysPressed,ljx,ljy,rjx,rjy,but1,but2,but3

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(UserInput, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.controlMode is None:
        self.controlMode = ''
      if self.keysPressed is None:
        self.keysPressed = ''
      if self.ljx is None:
        self.ljx = 0.
      if self.ljy is None:
        self.ljy = 0.
      if self.rjx is None:
        self.rjx = 0.
      if self.rjy is None:
        self.rjy = 0.
      if self.but1 is None:
        self.but1 = False
      if self.but2 is None:
        self.but2 = False
      if self.but3 is None:
        self.but3 = False
    else:
      self.controlMode = ''
      self.keysPressed = ''
      self.ljx = 0.
      self.ljy = 0.
      self.rjx = 0.
      self.rjy = 0.
      self.but1 = False
      self.but2 = False
      self.but3 = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.controlMode
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.keysPressed
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_4f3B().pack(_x.ljx, _x.ljy, _x.rjx, _x.rjy, _x.but1, _x.but2, _x.but3))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.controlMode = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.controlMode = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.keysPressed = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.keysPressed = str[start:end]
      _x = self
      start = end
      end += 19
      (_x.ljx, _x.ljy, _x.rjx, _x.rjy, _x.but1, _x.but2, _x.but3,) = _get_struct_4f3B().unpack(str[start:end])
      self.but1 = bool(self.but1)
      self.but2 = bool(self.but2)
      self.but3 = bool(self.but3)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.controlMode
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.keysPressed
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_4f3B().pack(_x.ljx, _x.ljy, _x.rjx, _x.rjy, _x.but1, _x.but2, _x.but3))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.controlMode = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.controlMode = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.keysPressed = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.keysPressed = str[start:end]
      _x = self
      start = end
      end += 19
      (_x.ljx, _x.ljy, _x.rjx, _x.rjy, _x.but1, _x.but2, _x.but3,) = _get_struct_4f3B().unpack(str[start:end])
      self.but1 = bool(self.but1)
      self.but2 = bool(self.but2)
      self.but3 = bool(self.but3)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_4f3B = None
def _get_struct_4f3B():
    global _struct_4f3B
    if _struct_4f3B is None:
        _struct_4f3B = struct.Struct("<4f3B")
    return _struct_4f3B
