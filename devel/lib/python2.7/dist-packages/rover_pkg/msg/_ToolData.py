# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rover_pkg/ToolData.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class ToolData(genpy.Message):
  _md5sum = "37110460499bfee4e7ed1a257662b8e0"
  _type = "rover_pkg/ToolData"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int16 QDC_SIG1
int16 QDC_SIG2
int16 QDC_SIG3
int16 QDC_SIG4
int16 QDC_SIG5
int16 QDC_SIG6
int16 QDC_SIG7
"""
  __slots__ = ['QDC_SIG1','QDC_SIG2','QDC_SIG3','QDC_SIG4','QDC_SIG5','QDC_SIG6','QDC_SIG7']
  _slot_types = ['int16','int16','int16','int16','int16','int16','int16']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       QDC_SIG1,QDC_SIG2,QDC_SIG3,QDC_SIG4,QDC_SIG5,QDC_SIG6,QDC_SIG7

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ToolData, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.QDC_SIG1 is None:
        self.QDC_SIG1 = 0
      if self.QDC_SIG2 is None:
        self.QDC_SIG2 = 0
      if self.QDC_SIG3 is None:
        self.QDC_SIG3 = 0
      if self.QDC_SIG4 is None:
        self.QDC_SIG4 = 0
      if self.QDC_SIG5 is None:
        self.QDC_SIG5 = 0
      if self.QDC_SIG6 is None:
        self.QDC_SIG6 = 0
      if self.QDC_SIG7 is None:
        self.QDC_SIG7 = 0
    else:
      self.QDC_SIG1 = 0
      self.QDC_SIG2 = 0
      self.QDC_SIG3 = 0
      self.QDC_SIG4 = 0
      self.QDC_SIG5 = 0
      self.QDC_SIG6 = 0
      self.QDC_SIG7 = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_7h().pack(_x.QDC_SIG1, _x.QDC_SIG2, _x.QDC_SIG3, _x.QDC_SIG4, _x.QDC_SIG5, _x.QDC_SIG6, _x.QDC_SIG7))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 14
      (_x.QDC_SIG1, _x.QDC_SIG2, _x.QDC_SIG3, _x.QDC_SIG4, _x.QDC_SIG5, _x.QDC_SIG6, _x.QDC_SIG7,) = _get_struct_7h().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_7h().pack(_x.QDC_SIG1, _x.QDC_SIG2, _x.QDC_SIG3, _x.QDC_SIG4, _x.QDC_SIG5, _x.QDC_SIG6, _x.QDC_SIG7))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 14
      (_x.QDC_SIG1, _x.QDC_SIG2, _x.QDC_SIG3, _x.QDC_SIG4, _x.QDC_SIG5, _x.QDC_SIG6, _x.QDC_SIG7,) = _get_struct_7h().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_7h = None
def _get_struct_7h():
    global _struct_7h
    if _struct_7h is None:
        _struct_7h = struct.Struct("<7h")
    return _struct_7h
